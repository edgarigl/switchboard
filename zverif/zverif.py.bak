import sys
import yaml
import types
from pathlib import Path

from doit.task import dict_to_task
from doit.cmd_base import TaskLoader2
from doit.doit_cmd import DoitMain

from zverif.zvconfig import ZvConfig
from zverif.riscv import ZvRiscv
from zverif.spike import ZvSpike
from zverif.verilator import ZvVerilator

def prep_task(name, task):
    if isinstance(task, types.GeneratorType):
        task = list(task)
        for elem in task:
            elem["name"] = f'{name}:{elem["name"]}'
    else:
        task["name"] = name
        task = [task]

    # convert to Task objects
    task = [dict_to_task(elem) for elem in task]

    return task

class ZverifLoader(TaskLoader2):
    def setup(self, opt_values):
        pass

    def load_doit_config(self):
        return {
            'default_tasks': ['verilator:hello'],
            'verbosity': 2
        }

    def load_tasks(self, cmd, pos_args):
        # read YAML configuration
        file_path = 'zverif.yaml'
        with open(file_path, 'r') as stream:
            data = yaml.safe_load(stream)
        cfg = ZvConfig(file_path=file_path, data=data)

        task_list = []
        task_list += prep_task('elf', ZvRiscv(cfg).task_elf())
        task_list += prep_task('bin', ZvRiscv(cfg).task_bin())
        task_list += prep_task('hex', ZvRiscv(cfg).task_hex())
        task_list += prep_task('spike', ZvSpike(cfg).task_spike())
        task_list += prep_task('spike_plugins', ZvSpike(cfg).task_spike_plugins())
        task_list += prep_task('verilator_build', ZvVerilator(cfg).task_verilator_build())
        task_list += prep_task('verilator', ZvVerilator(cfg).task_verilator())

        return task_list

def main():
    DoitMain(ZverifLoader()).run(sys.argv[1:])

if __name__ == "__main__":
    sys.exit()